# 假设字典 dic_city 中存放了每个人旅游过的城市，内容为
# { "张三风": ["北京", "成都"],
# "李茉绸": ["上海", "广州", "兰州"], 
# "慕容福": ["太原", "西安", "济南", "上海"]}。
# 试编写程序，实现以下功能。
#（1）统计每个人旅游过的城市的数目。输出结果如下：
# 张三风去过2个城市
# 李茉绸去过3个城市
# 慕容福去过4个城市
# 提示：输出结果涉及条目的键和值，可使用 for k,v in 字典.items() 方法遍历条目，对v求长度即城市的个数。
# （2）统计去过上海的人数以及名单。输出结果如下：
# 去过上海的有2人，他们是李茉绸、慕容福
# 提示：在条件列表生成式中使用 for k,v in 字典.items() 方法遍历条目，如果上海出现在v中，则将k放在列表里，最后列表里存放的就是去过上海的人名。


# 正常算法
dic_city = { "张三风": ["北京", "成都"],
             "李茉绸": ["上海", "广州", "兰州"], 
             "慕容福": ["太原", "西安", "济南", "上海"]}
items = dic_city.items()
first = [f"{x[0]}去过{len(x[1])}个城市" for x in items] # 列表推导式：完成第一题，意思是遍历上面的items这个列表，并添加一个符合题目的句子
shanghai = [x[0] for x in items if "上海" in x[1]] # 列表推导式：完成第二题，意思是统计去过上海的人的名字
name = "、".join(shanghai)
print("\n".join(first))
print(f"去过上海的有{len(shanghai)}人，他们是{name}")

# 很显然这个也是可以当填空题
print("张三风去过2个城市\n李茉绸去过3个城市\n慕容福去过4个城市\n去过上海的有2人，他们是李茉绸、慕容福\n")