# 一个整数，如果它加上100后是一个完全平方数，加上268也是一个完全平方数，
# 例如 21，加上100后为121、加上268后为289，而121为11的平方、289为17的平方，121和289均为完全平方数，
# 因此 21 就是一个满足条件的整数。
# 输出10000以内这样的数，共3个，要求一行输出一个。
# 【提示】
# 如何判断 n 为完全平方数？
# 提示：求 n 的平方根， 将平方根转换为整型数m，如果 m*m 与 n 相等，则 n 就是一个完全平方数。



# 不用math库
for i in range(1,10001):
    if (i+100)**(1/2) == int((i+100)**(1/2)) and (i+268)**(1/2) == int((i+268)**(1/2)): # 将结果与其转化成整数后的结果比较，相等则成立
        print(i)

# math库
import math

for i in range(1,10001):
    if math.sqrt(i+100) in range(100) and math.sqrt(i+268) in range(100): # range()是整数，结果如果在range()中则成立
        print(i)

# 上面两种算法中的条件判断的式子都对该题成立，自己转换一下都能用
# 条件判断严谨来说不推荐这样写，因为浮点数和整数本身是有区别的，某些数的值上面是不相等的
# 因为开方开出来是浮点数，不能直接用 type() 判断是不是整数

# 较严谨的判断（以不用math库为准）
for i in range(1,10001):
    if ((i+100)**(1/2)).is_integer() and ((i+268)**(1/2)).is_integer(): # is_integer() 方法是 Python 中 float 类型的一个方法，用来判断一个浮点数值是不是“整数值”，但是依然存在浮点数与整数的偏差
        print(i)



